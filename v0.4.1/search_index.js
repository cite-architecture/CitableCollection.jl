var documenterSearchIndex = {"docs":
[{"location":"api/#API-documentation","page":"API docs","title":"API documentation","text":"","category":"section"},{"location":"api/#Exported-structures-and-functions","page":"API docs","title":"Exported structures and functions","text":"","category":"section"},{"location":"api/","page":"API docs","title":"API docs","text":"PropertyDefinition\ncitetype\nauthlist\nRawDataCollection","category":"page"},{"location":"api/#CitableCollection.PropertyDefinition","page":"API docs","title":"CitableCollection.PropertyDefinition","text":"Configuration data for a single property in a collection.\n\n\n\n\n\n","category":"type"},{"location":"api/#CitableCollection.citetype","page":"API docs","title":"CitableCollection.citetype","text":"Retrieve CITE type for property.\n\ncitetype(pdef)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableCollection.authlist","page":"API docs","title":"CitableCollection.authlist","text":"Retrieve (possibly empty) list of allowed values.\n\nauthlist(pdef)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableCollection.RawDataCollection","page":"API docs","title":"CitableCollection.RawDataCollection","text":"A collection of citable data.\n\nThe collection is itself a citable object.  In addition, it contains a table of citable objects represented as a TypedTables.Table.\n\n\n\n\n\n","category":"type"},{"location":"api/#Internal-functions","page":"API docs","title":"Internal functions","text":"","category":"section"},{"location":"api/","page":"API docs","title":"API docs","text":"CitableCollection.lazyread\nCitableCollection.strictread\nCitableCollection.collectionsfromprops\nCitableCollection.propertyids\nCitableCollection.typeforcprop\nCitableCollection.cpropfortype\nCitableCollection.converttypes","category":"page"},{"location":"api/#CitableCollection.lazyread","page":"API docs","title":"CitableCollection.lazyread","text":"Read CITE collections from a CEX source without reference to citeproperties configuration.\n\nlazyread(cexsrc)\nlazyread(cexsrc, delimiter)\n\n\nCollections are assumed to have a field named urn that  has the unique identifier for objects in the collection.\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableCollection.strictread","page":"API docs","title":"CitableCollection.strictread","text":"Read data for citable collections from cexsrc. Determine types of columns for each table from configuration in citeproperties section of the CEX.\n\nstrictread(cexsrc)\nstrictread(cexsrc, delimiter)\n\n\nIf any columns of a collection are not configured, it is an error.\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableCollection.collectionsfromprops","page":"API docs","title":"CitableCollection.collectionsfromprops","text":"Compute a list of URNs identifying collections from a list of PropertyDefinitions.\n\ncollectionsfromprops(proplist)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableCollection.propertyids","page":"API docs","title":"CitableCollection.propertyids","text":"Compute property names for properties in a list of PropertyDefinitions matching a give collection URN.\n\npropertyids(propslist, collectionurn)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableCollection.typeforcprop","page":"API docs","title":"CitableCollection.typeforcprop","text":"Determine Julia type corresponding to CEX name for property type.\n\ntypeforcprop(cprop)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableCollection.cpropfortype","page":"API docs","title":"CitableCollection.cpropfortype","text":"Find CITE string value to use in serializing property  type.\n\ncpropfortype(pd)\n\n\n\n\n\n\nFind CITE string value to use in serializing property  type.\n\ncpropfortype(citeproptype)\n\n\n\n\n\n\n","category":"function"},{"location":"api/#CitableCollection.converttypes","page":"API docs","title":"CitableCollection.converttypes","text":"Convert any string-value columns in a RawDataCollection configured for URN values in their property definitions to the appropriate type of URN value.\n\nconverttypes(rdc, rdcprops)\n\n\n\n\n\n\n","category":"function"},{"location":"structs/#Relation-of-CEX-data-to-CitableCollection-data-structures","page":"Data structures","title":"Relation of CEX data to CitableCollection data structures","text":"","category":"section"},{"location":"structs/","page":"Data structures","title":"Data structures","text":"In CEX, a table of data is represented by two blocks: the citeproperties block describes schemas, while the citedata block contains the table of data.","category":"page"},{"location":"structs/","page":"Data structures","title":"Data structures","text":"In addition, collections may be cataloged with further metadata in a citecollections block.","category":"page"},{"location":"structs/","page":"Data structures","title":"Data structures","text":"The CitableCollection package can instantiate four kinds of objects from a CEX source.","category":"page"},{"location":"structs/","page":"Data structures","title":"Data structures","text":"a PropertyDefinition defines name and data type of a single property or field of a data table.  This can be created from a single line of a citeproperties block.\na RawDataCollection associates the data from a citedata block with a schema.  If CEX source includes schema information for a given collection, the schema for the RawDataCollection is built using that.  If the citedata block does not have associated citeproperties information, a schema is inferred.  \na CiteCollectionCatalog catalogs one or more data sets with metadata associated with the collection as a whole, incuding a label or description, licensing information, and information about natural ordering, if any, of the data set.\na CatalogedDataCollection unites a single entry from a CiteCollectionCatalog with a RawDataCollection.","category":"page"},{"location":"walkthrough/#A-more-detailed-walkthrough","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"","category":"section"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"root = pwd() |> dirname |> dirname","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"Throughout these examples, we'll use a small sample file called hmtextract.cex in the test/data directory of this repository.","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"Since the file is in CEX format, we'll use the fromcex function from CitableBase to create different kinds of objects in the CitableCollection package.","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"f = joinpath(root, \"test\", \"data\", \"hmtextract.cex\")\nusing CitableBase, CitableCollection","category":"page"},{"location":"walkthrough/#Reading-a-catalog-of-collections","page":"A more detailed walkthrough","title":"Reading a catalog of collections","text":"","category":"section"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"We can read data in citecollections blocks into a single catalog comprising all collections cataloged in the CEX source.","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"catalog = fromcex(f, CiteCollectionCatalog, FileReader, delimiter = \"#\")","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"The catalog is a citable collection.  Let's get an idea of what's in it.","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"for coll in catalog\n    println(coll)\nend","category":"page"},{"location":"walkthrough/#Reading-tables-of-data","page":"A more detailed walkthrough","title":"Reading tables of data","text":"","category":"section"},{"location":"walkthrough/#Strict-parsing","page":"A more detailed walkthrough","title":"Strict parsing","text":"","category":"section"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"We can read data from citedata blocks into a series RawDataCollections.  By default, the fromcex function will look for property definitions in a the citeproperties blocks of the CEX source, and require that each column in each table have a corresponding entry.  It will then use the information from citeproperties to create an appropriate schema for the resulting table.","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"strictly = fromcex(f, RawDataCollection, FileReader, delimiter = \"#\")","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"note: Return types of `fromcex`\nNote that while using fromcex to instantiate data for aCiteCollectionCatalog always returns a single CiteCollectionCatalog object, instantiating data for a RawDataCollection returns a Vector of RawDataCollections, since each collection could have a different schema.","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"We can use the Tables package to examine the schema of a table.","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"using Tables\nTables.schema(strictly[2])","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"The metadata in the cexproperties block looks  like this:","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"#!citeproperties\nProperty#Label#Type#Authority list\nurn:cite2:hmt:e3pages.v1.sequence:#Page sequence#Number#\nurn:cite2:hmt:e3pages.v1.image:#TBS image#Cite2Urn#\nurn:cite2:hmt:e3pages.v1.urn:#URN#Cite2Urn#\nurn:cite2:hmt:e3pages.v1.rv:#Recto or Verso#String#recto,verso\nurn:cite2:hmt:e3pages.v1.label:#Label#String#","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"Notice that fromcex choose appropriate Julia types for generic Number and String type indications, and converts the CEX data to URN types where they are indicated.","category":"page"},{"location":"walkthrough/#Lazy-parsing","page":"A more detailed walkthrough","title":"Lazy parsing","text":"","category":"section"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"The CEX standard says that any single CEX block constitutes a valid CEX source.  If you have a CEX source including citedata blocks, but no corresponding citeproperties blocks, you can still create RawDataCollections from them by setting the strict parameter to false","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"lazily = fromcex(f, RawDataCollection, FileReader, delimiter = \"#\", strict = false)","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"When parsing lazily, fromcex converts the contents of a column named urn to type Cite2Urn; for other columns, it chooses types based on the column contents only.  Notice that this results in URN values being treated as string data.","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"Tables.schema(lazily[2])","category":"page"},{"location":"walkthrough/#Reading-cataloged-collections-from-a-CEX-source","page":"A more detailed walkthrough","title":"Reading cataloged collections from a CEX source","text":"","category":"section"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"If your CEX source includes both citeproperties data for the schema of each collection and a catalog of metadata for your collections, you can create a Vector of CatalogedCollections from the CEX.","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"cclist = fromcex(f, CatalogedCollection, FileReader, delimiter = \"#\")","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"Each CatalogedCollection has both a unique catalog entry and a raw data collection with a schema derived from its citeproperties information.","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"The schema will in other words is produced by strict parsing.","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"Tables.schema(cclist[2])","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"The associated catalog information makes the CatalogedCollection a citable object.","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"label(cclist[2])","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"urn(cclist[2])","category":"page"},{"location":"walkthrough/#Querying-collections","page":"A more detailed walkthrough","title":"Querying collections","text":"","category":"section"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"The CatalogedCollection is also a citable collection, so you can filter it using URN logic or by directly applying filter, map, or other generic Julia functions to it.","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"We could select data based on a version-agnostic URN, for example:","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"genericurn = dropversion(urn(cclist[2]))\nurncontains(genericurn, cclist[2])","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"Since we have already examined the schema, we could use that knowledge to select only recto pages.","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"filter(r -> r.rv == \"recto\",  cclist[2])","category":"page"},{"location":"walkthrough/","page":"A more detailed walkthrough","title":"A more detailed walkthrough","text":"RawDataCollections (and therefore also CatalogedCollections) make available all functions that can be applied to the TypedTables.Table type, so you can directly work with for loops, or operations like group and reduce, or you can use higher-order packages like Query.jl.","category":"page"},{"location":"#CitableCollection","page":"Overview","title":"CitableCollection","text":"","category":"section"},{"location":"#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Collections of citable objects are generic tabular data structures with a schema.  They  meet two specific requirements of the CITE architecture:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"they can be filtered using URN logic\nthey support serialization to and instantiation from delimited text following the CEX format","category":"page"},{"location":"#TL;DR","page":"Overview","title":"TL;DR","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"root = pwd() |> dirname |> dirname","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Read a brief CEX sample with data in two cataloged collections from a sample data file in this repository's test/data directory.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using CitableBase, CitableCollection\nf = joinpath(root, \"test\", \"data\", \"hmtextract.cex\")\ncatalogedcollections = fromcex(f, CatalogedCollection, FileReader, delimiter = \"#\")","category":"page"}]
}
